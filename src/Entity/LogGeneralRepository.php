<?php
/**
 * 2017 HiPay
 *
 * NOTICE OF LICENSE
 *
 * @author    HiPay <support.wallet@hipay.com>
 * @copyright 2017 HiPay
 * @license   https://github.com/hipay/hipay-wallet-cashout-mirakl-integration/blob/master/LICENSE.md
 */

namespace HiPay\Wallet\Mirakl\Integration\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\Types\Type;

/**
 * LogGeneralRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogGeneralRepository extends AbstractTableRepository
{

    protected function getSelectString()
    {
        return 'a.createdAt, a.levelName, a.action, a.miraklId, a.message';
    }

    protected function getCountString()
    {
        return 'COUNT(a.id)';
    }

    protected function prepareAjaxRequest($queryBuilder, $search, $custom)
    {

        if (!empty($search)) {
            $queryBuilder->where(
                    $queryBuilder->expr()->orX(
                        $queryBuilder->expr()->like('a.miraklId', '?1')
                    )
                )
                ->setParameter(1, '%'.$search.'%');
        }

        if (isset($custom["log-level"]) && $custom["log-level"] != -1) {
            $queryBuilder->andWhere(
                $queryBuilder->expr()->eq('a.level', $custom["log-level"])
            );
        }

        if (isset($custom["date-start"]) && !empty($custom["date-start"])) {

            $dateStart = \DateTime::createFromFormat('d/m/Y H:i:s', $custom["date-start"].' 00:00:00');
            if ($dateStart) {
                $queryBuilder->andWhere(
                        $queryBuilder->expr()->gte('a.createdAt', ':start')
                    )
                    ->setParameter('start', $dateStart, Type::DATETIME);
            }
        }

        if (isset($custom["date-end"]) && !empty($custom["date-end"])) {

            $dateStart = \DateTime::createFromFormat('d/m/Y H:i:s', $custom["date-end"].' 23:59:59');
            if ($dateStart) {
                $queryBuilder->andWhere(
                        $queryBuilder->expr()->lte('a.createdAt', ':last')
                    )
                    ->setParameter('last', $dateStart, Type::DATETIME);
            }
        }

        return $queryBuilder;
    }
}